#!/usr/bin/env python3

import argparse
import sys
import re
from pycbio.sys.color import Color
from pycbio.hgdata.bed import BedReader


def parseArgs():
    usage = """Edit repeat masker BED files, generated by RM2Bed.py, to add color
and correct coordinates.
"""
    parser = argparse.ArgumentParser(description=usage)
    parser.add_argument('inBed', nargs='?', default=sys.stdin,
                        type=argparse.FileType('r'),
                        help="input BED file")
    parser.add_argument('outBed', nargs='?', default=sys.stdout,
                        type=argparse.FileType('w'),
                        help="output BED file")
    return parser.parse_args()

def mkColor(s):
    return Color.fromHtmlColor(s)
# either class or name here
repColorTable = {
    "(CATTC)n": mkColor("#E87C71"),
    "(GAATC)n": mkColor("#E28455"),
    "ALR/Alpha": mkColor("#D78C32"),
    "BSR/Beta": mkColor("#E370AB"),
    "CER": mkColor("#CE9334"),
    "DNA": mkColor("#C19935"),
    "GSAT": mkColor("#B3A033"),
    "HSAT": mkColor("#A2A638"),
    "LINE": mkColor("#8CAC3E"),
    "Low_complexity": mkColor("#75B042"),
    "LSAU": mkColor("#54B346"),
    "LTR": mkColor("#51B756"),
    "RC/Helitron": mkColor("#53BB73"),
    "Retroposon": mkColor("#55BE8D"),
    "RNA": mkColor("#54C0A5"),
    "rRNA": mkColor("#52BEBB"),
    "SAR": mkColor("#51BDCE"),
    "Satellite/acro": mkColor("#4EB8DF"),
    "Satellite/telo": mkColor("#53B0E3"),
    "SATR1": mkColor("#5AA5DA"),
    "scRNA": mkColor("#6B9AD2"),
    "Simple repeat": mkColor("#8992C8"),
    "SINE": mkColor("#9A8AC1"),
    "snRNA": mkColor("#A885BC"),
    "srpRNA": mkColor("#B67EB6"),
    "SSTI": mkColor("#C378B2"),
    "SUBTEL_sa": mkColor("#D173AF"),
    "tRNA": mkColor("#ED72A5"),
    "Unknown": mkColor("#EF768C"),
}
defaultColor = mkColor("#000080")

def fixChrom(rec):
    # fixed cases where chroms were named like tig00018121:0-1387635
    m = re.match("^([a-zA-Z0-9]+):([0-9]+)-([0-9]+)$", rec.chrom)
    if m:
        if m.group(2) != "0":
            raise Exception("coordinates encoded in chrom name should start at '0': {}".format(rec.chrom))
        rec.chrom = m.group(1)

def lookupColor(*names):
    for n in names:
        clr = repColorTable.get(n)
        if clr is not None:
            return clr
    return defaultColor

def editBedRec(rec):
    repClass, repFamily = rec.extraCols[0:2]
    rec.thickStart = rec.chromStart
    rec.thickEnd = rec.chromEnd
    rec.itemRgb = lookupColor(repClass, repFamily, repClass + "/" + repFamily, rec.name).toRgb8Str()
    rec.extraCols = None
    rec.name += "[" + repClass
    if repFamily != "unknown":
        rec.name += "/" + repFamily
    rec.name += "]"
    fixChrom(rec)
    rec.score = "0"
    return rec


def main(args):
    for rec in BedReader(args.inBed, numStdCols=6):
        editBedRec(rec).write(args.outBed)
    args.outBed.close()

main(parseArgs())
